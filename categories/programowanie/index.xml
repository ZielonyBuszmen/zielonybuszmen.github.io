<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programowanie on Zielony Buszmen</title>
    <link>https://zielonybuszmen.github.io/categories/programowanie/</link>
    <description>Recent content in Programowanie on Zielony Buszmen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-pl</language>
    <lastBuildDate>Wed, 24 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zielonybuszmen.github.io/categories/programowanie/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ruby - ściągawka</title>
      <link>https://zielonybuszmen.github.io/2018/10/24/ruby-sciagawka/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zielonybuszmen.github.io/2018/10/24/ruby-sciagawka/</guid>
      <description>Ruby jest dosyć rozbudowanym językiem pod względem składni. Sam język ma lukier składniowy (syntax sugar) prawie na każdy element. Dlatego poniżej wrzucam małą ściągawkę ze składni. Post jest dosyć rozbudowany, dlatego polecam go przeszukiwać, a nie czytać w całości.
Spis treści  Typy wbudowane  Tablice Hashe Zakresy (Range) Splat Operator  Klasy i obiekty  Akcesory Konstruktory Dziedziczenie Zmienne i metody klasy Inne  Konstrola dostępu Monkey patching &amp;amp; Open classes   Sterowanie przepływem  Warunki Przypisywanie warunkowe Konstrukcja case Pętle Iteratory i bloki Kontrola wykonywania pętli Wyjątki  Obsługiwanie wyjątków Rzucanie wyjątków ensure &amp;amp; else Ponawianie prób    Warto zaznaczyć, że w Ruby wielkość znaków ma znaczenie.</description>
    </item>
    
    <item>
      <title>Wygodne Reducery</title>
      <link>https://zielonybuszmen.github.io/2018/10/07/wygodne-reducery/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://zielonybuszmen.github.io/2018/10/07/wygodne-reducery/</guid>
      <description>Dokumentacja Reduxa, pokazująca jego podstawy, podaje jeden przepis na pisanie reducerów. Nie jest on skomplikowany, gdyż korzysta z każdemu znanej konstrukcji switch() case.
Wygląda on tak:
function todoApp(state, action) { switch (action.type) { case SET_VISIBILITY_FILTER: const newState = {...state, visibilityFilter: action.filter}; return newState; case SET_PRIVS: return setNewPrivs(state); default: return state } }  Gdy zaczniemy dorzucać kolejne akcje, składnia stanie się szybko nieczytelna.
A co, gdyby reducer wyglądał tak:
function setNewPrivs(state, action) { const newState = {.</description>
    </item>
    
    <item>
      <title>Komendy GITa (cheat-sheet)</title>
      <link>https://zielonybuszmen.github.io/2017/10/22/git/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zielonybuszmen.github.io/2017/10/22/git/</guid>
      <description>Mały cheat sheet z komendami GITa. Trochę tego się nazbierało, dlatego najlepszym wyjściem będzie Ctrl + F. Wszystkie komendy gita są szczegółowo opisane na stronie dokumentacji git-scm.com/docs.
Natomiast samego GITa można pobrać stąd: git-scm.com/downloads
Konfiguracja Lista wszystkich opcji konfiguracyjnych
git config -l  Ustalenie opcji
git config --global user.name &amp;quot;Imie Nazwisko&amp;quot; git config --global user.email mail@cos.pl  Ustalenie opcji dla projektu
git config user.name &amp;quot;Imie Nazwisko&amp;quot; git config user.email mail@cos.</description>
    </item>
    
    <item>
      <title>Laravel i Angular w jednym stali domku</title>
      <link>https://zielonybuszmen.github.io/2017/03/01/instalacja-angulara2-do-laravela5-do-wspoldzialania/</link>
      <pubDate>Wed, 01 Mar 2017 21:47:42 +0000</pubDate>
      
      <guid>https://zielonybuszmen.github.io/2017/03/01/instalacja-angulara2-do-laravela5-do-wspoldzialania/</guid>
      <description>Na necie jest cała masa poradników, jak zainstalować Angulara2. Tylko wszystkie mają pewien problem – Angular instaluje się jako „stand-alone”. Jak więc go dodać do Laravela? Jest jeden prosty sposób – korzystać z Laravela jako API, a cała aplikacja (front) powinna być zrobiona w Angularze2. Takie rozwiązanie mnie nie satysfakcjonowało, więc spróbowałem zainstalować Angulara razem z Laravelem, tak aby korzystać z odpowiedniej struktury katalogów oraz nie zaburzyć porządku w aplikacji Laravela.</description>
    </item>
    
    <item>
      <title>Laravel 5 a testy w PHPStorm</title>
      <link>https://zielonybuszmen.github.io/2017/02/26/laravel-testy-jednostkowe-w-phpstormie/</link>
      <pubDate>Sun, 26 Feb 2017 17:06:36 +0000</pubDate>
      
      <guid>https://zielonybuszmen.github.io/2017/02/26/laravel-testy-jednostkowe-w-phpstormie/</guid>
      <description>Krótki wpis, szybka porada - jak uruchomić testy jednostkowe Laravela w PHPStorm?
Przechodzimy do Settings (Ctrl + Alt + S), klikamy Languages &amp;amp; Frameworks, następnie PHP i wybieramy PHPUnit.
W nowo otwartym oknie wybieramy Use Composer autoloader i jako ścieżkę podajemy plik /vendor/autoload.php, który znajduje się w naszym projekcie.
Testowanie Przechodzimy do /tests/ExampleTest.php i piszemy przykładowy test:
class ExampleTest extends TestCase { public function testTrue() { $this-&amp;gt;assertTrue(true); } }  Aby uruchomić test, ustawiamy kursor w funkcji testTrue oraz wciskamy kombinacje klawiszy Ctrl + Shift + F10.</description>
    </item>
    
    <item>
      <title>Instalacja CakePHP od podszewki</title>
      <link>https://zielonybuszmen.github.io/2017/02/21/instalacja-cakephp-od-podszewki/</link>
      <pubDate>Tue, 21 Feb 2017 17:13:57 +0000</pubDate>
      
      <guid>https://zielonybuszmen.github.io/2017/02/21/instalacja-cakephp-od-podszewki/</guid>
      <description>   Linki, komendy  Composer: https://getcomposer.org/download/ CakePHP installation: https://book.cakephp.org/3.0/en/installation.html composer create-project --prefer-dist cakephp/app&amp;lt;br /&amp;gt;   </description>
    </item>
    
    <item>
      <title>Binarne drzewo poszukiwań – Binary Search Tree (BST)</title>
      <link>https://zielonybuszmen.github.io/2017/02/20/binarne-drzewo-poszukiwan-binary-search-tree-bst/</link>
      <pubDate>Mon, 20 Feb 2017 15:00:38 +0000</pubDate>
      
      <guid>https://zielonybuszmen.github.io/2017/02/20/binarne-drzewo-poszukiwan-binary-search-tree-bst/</guid>
      <description>Drzewo to hierarchiczna struktura danych. Co to znaczy? Że do jego „obsługi” w kodzie będziemy musieli używać rekurencji (tej trudnej i nieciekawej). Na początku przyjrzymy się, jak to wszystko wygląda na obrazkach, dopiero potem zaimplementujemy naszą wiedzę w kodzie.
Drzewo składa się z węzłów (nodes). Każdy z nich posiada co najwyżej dwóch następników. Stąd też nazwa „binarne”, bo binarny to „dwójkowy” (zawierający dwa elementy). Drzewo posiada tzw. „węzeł nadrzędny” (root).</description>
    </item>
    
  </channel>
</rss>